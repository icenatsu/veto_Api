generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Ville {
  id         Int           @id @default(autoincrement())
  nom        String        @db.VarChar(100)
  codePostal String        @db.VarChar(20)
  vetClinics Veterinaire[]

  @@unique([nom, codePostal])
}

model Veterinaire {
  id            Int      @id @default(autoincrement())
  nom           String   @unique @db.VarChar(255)
  adresse       String   @db.VarChar(255)
  telephone     String   @db.VarChar(20)
  horaires      String   @db.VarChar(255)
  latitude      String   @db.VarChar(255)
  longitude     String   @db.VarChar(255)
  website       String?  @db.VarChar(255)
  villeId       Int
  isOpen24Hours Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ville         Ville    @relation(fields: [villeId], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
